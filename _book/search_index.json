[["index.html", "Introduction to Environmental Data Science: Final Project Preface", " Introduction to Environmental Data Science: Final Project Amanda Hastings 2022-03-22 Preface This book contains six different projects completed in ESS580: Introduction to Environmental Data Science taught by Dr. Matt Ross and Dr. Nathan Mueller at Colorado State University. Each chapter details the purpose, data acquisition, analyses, and results of an individual project completed in the 2022 spring semester. For each project, Dr. Matt Ross and/or Dr. Nathan Mueller wrote the preliminary code and outlined project objectives. Amanda Hastings completed the remaining portions of each project and compiled this book. "],["workflow-tools.html", "Chapter 1 Workflow tools 1.1 Introduction 1.2 Methods 1.3 Results 1.4 Poudre River Information 1.5 References", " Chapter 1 Workflow tools 1.1 Introduction This project served as an introduction to workflow tools: R Markdown, Git, and GitHub. To complete project objectives, we utilized USGS discharge data for the Cache la Poudre River at the Lincoln Avenue bridge in Fort Collins, CO. Project objectives included: Fork example repository to personal GitHub Explore R Markdown formatting Utilize dygraphs package for interactive plotting Commit and push work to GitHub 1.2 Methods Site Description The Poudre River at Lincoln Bridge is: Near Old Town Fort Collins, CO and multiple craft breweries, including Odell Brewing Near an open space and the Poudre River Trail Downstream of only some urban stormwater Downstream of many agricultural diversions Figure 1. The Lincoln Avenue bridge was reconstructed in 2017 to accommodate sidewalks and bike lanes. Photograph courtesy of Otak. Figure 2. USGS Station at the Lincoln Bridge location, Poudre River - Fort Collins, CO. Photograph courtesy of USGS. Data Acquistion We retrieved discharge data using the dataRetrieval R package from the USGS NWIS web service. #Download Poudre River discharge data at Lincoln Bridge site from NWIS web service DischargeData &lt;- readNWISdv( siteNumbers = &#39;06752260&#39;, parameterCd = &#39;00060&#39;, startDate = &#39;2017-01-01&#39;, endDate = &#39;2022-01-01&#39;) %&gt;% rename(discharge = &#39;X_00060_00003&#39;) 1.3 Results Static Plot Interactive Plot 1.4 Poudre River Information Figure 3. Cache la Poudre River. Photograph courtesy of Marek Uliasz. Meandering through Roosevelt National Forest and dropping approximately 7,000 feet in elevation, the Cache la Poudre River stretches from peaks along the Continental Divide to foothills of the Front Range near Fort Collins, CO (USFS). Despite the great length of the river, stretches of uninterrupted habitat for resident fishes are becoming increasingly limited particularly with the construction of man-made diversion structures (Bloom, 2018). As of 2018, researchers estimated approximately 82% Great Plains fish are in decline, with species such as the common shiner, Luxilus cornutus, and the central stoneroller, Campostoma anomalum, potentially lost to northern Colorado waterways (Bloom, 2018). Species including small minnows such as the red shiner, Cyprinella lutrensis, and orangespotted sunfish, Lepomis humilis require stretches of at least 30 miles to migrate and spawn (Bloom, 2018). However, could another man-made structure potentially offset the necessary, yet imperiling, structures in place? CSU researcher Dr. Chris Myrick and his graduate students built a fish ladder for small fishes, similar to those previously built for larger fishes, to essentially extend their, otherwise interrupted, habitat. Here is a fish eyes view of the fish ladder the team created. While the only fish ladder within Larimer County, the research team hopes the design will be transferable and a means to protect small fish across other states as well (Bloom, 2018). Another noteworthy fact about the Poudre river: it is the only designated National Wild and Scenic River within the state of Colorado (USFS). A map of the National Wild and Scenic Rivers system can be found here. Presentation link This chapter has also been formatted into a presentation/talk using the reveal.js package. The formatted version can be found here. 1.5 References Bloom, Matt.(2018, March) To Reverse The Disappearance of Native Fish, North Colorado Is Turning to Fish Ladders. NPR for Northern Colorado. kunc.org Interagency Wild &amp; Scenic Rivers Council. MAPS &amp; GIS. National Wild and Scenic Rivers System. rivers.gov/mapping-gis.php. Accessed January 26, 2022. Uliasz, Marek.(2019, August) Cache la Poudre River, Colorados Scenic and Historic Byways: Cache La Poudre/North Park, 5280 Denvers Mile High Magazine, 5280.com USDA Forest Service (USFS). Cache la Poudre Wild and Scenic River. fs.usda.gov. Accessed January 26, 2022. "],["data-wrangling.html", "Chapter 2 Data wrangling 2.1 Introduction 2.2 Methods 2.3 Results", " Chapter 2 Data wrangling 2.1 Introduction This project served as an introduction and exploration in data munging. We utilized data from Climate Engine to investigate vegetation recovery following the 2002 Hayman Fire in Colorado. We specifically looked at normalized difference vegetation index (NDVI), normalized difference snow index (NDSI), and normalized difference moisture index (NDMI), between unburned and burned sites and before and after the fire event. Once manipulating the data, we performed basic analyses to address the following project questions: What is the correlation between NDVI and NDMI? What is the correlation between average NDSI for winter months: January - April and average NDVI for summer months: June-August? How does snow cover from the previous year influence vegetation growth in the following summer? How does the correlation in snow cover and vegetation growth (from question b) vary between burned and unburned sites and pre- and post-fire time periods? 2.2 Methods Data Acquistion #Read in files and store in data folder files &lt;- list.files(&#39;dataDataWrangle&#39;,full.names=T) #Read in individual data files separately #NDMI data ndmi &lt;- read_csv(files[1]) %&gt;% rename(burned=2,unburned=3) %&gt;% mutate(data=&#39;ndmi&#39;) #NDSI data ndsi &lt;- read_csv(files[2]) %&gt;% rename(burned=2,unburned=3) %&gt;% mutate(data=&#39;ndsi&#39;) #NDVI data ndvi &lt;- read_csv(files[3])%&gt;% rename(burned=2,unburned=3) %&gt;% mutate(data=&#39;ndvi&#39;) # Stack data as a tidy dataset full_long &lt;- rbind(ndvi,ndmi,ndsi) %&gt;% gather(key=&#39;site&#39;,value=&#39;value&#39;,-DateTime,-data) %&gt;% filter(!is.na(value)) 2.3 Results Question A: NDVI and NDMI #Convert from long to wide data with spread() #Add month and year columns to wide data full_wide1 &lt;- full_long %&gt;% spread(key=&#39;data&#39;, value=&#39;value&#39;) %&gt;% mutate(month=month(DateTime)) %&gt;% mutate(year=year(DateTime)) #Limit data to only summer months using filter() summer_wide &lt;- full_wide1 %&gt;% filter(month %in% c(6,7,8)) #Plot ndvi as response and ndmi as predictor #Distinguish between burn or unburned sites ggplot(summer_wide, aes(x=ndmi, y=ndvi, color=site))+ geom_point(alpha=0.25)+ labs(x=&quot;NDMI&quot;, y=&quot;NDVI&quot;)+ theme_few()+ scale_color_manual(name=&quot;Site&quot;,labels=c(&quot;Burned&quot;,&quot;Unburned&quot;), values= c(&quot;#274a12&quot;,&quot;#babf28&quot;))+ xlim(-0.6,0.7)+ ylim(0.05, 0.6) # Plot ndvi vs ndmi with facet wrap over site type (burned or unburned) ggplot(summer_wide, aes(x=ndmi, y=ndvi))+ geom_point(alpha=0.25)+ labs(x=&quot;NDMI&quot;, y=&quot;NDVI&quot;)+ theme_few()+ facet_wrap(&#39;site&#39;, labeller = labeller(site = Site)) #Test correlation between ndvi and ndmi cor.test(summer_wide$ndmi, summer_wide$ndvi, method=&#39;pearson&#39;) #Fit lm model for ndvi by ndmi LMFit1 &lt;- lm(ndvi~ndmi, data =summer_wide) summary(LMFit1) Based upon a test of correlation, we have evidence of a positive linear association between summer NDMI and summer NDVI, with a p-value &lt; 2.2e-16 (less than 0.05). For every 1 unit increase in summer NDMI, there is a 0.908772 increase in summer NDVI (p-value &lt; 2.2e-16). Question B: Winter NDSI and Summer NDVI #Summarize data by average ndvi for summer months summer_ndvi&lt;- full_wide1 %&gt;% group_by(site, year, month) %&gt;% filter(month %in% c(6, 7, 8)) %&gt;% summarize(mean_ndvi = mean(ndvi)) %&gt;% filter(!is.na(mean_ndvi)) #Summarize data by average ndsi over winter months winter_ndsi &lt;- full_wide1 %&gt;% group_by(site, year, month) %&gt;% filter(month %in% c(1, 2, 3, 4)) %&gt;% summarize(mean_ndsi = mean(ndsi)) %&gt;% filter(!is.na(mean_ndsi)) #Join average summer ndvi and average winter ndsi by year and site #Add burnperiod column to distinguish pre- and post-fire years wide_averages &lt;- inner_join(winter_ndsi, summer_ndvi, by= c(&#39;site&#39;, &#39;year&#39;)) %&gt;% mutate(burnperiod = as.factor(ifelse(year &lt; 2002,&quot;prefire&quot;, &quot;postfire&quot;))) #Plot and evaluate relationship between ndvi and ndsi ggplot(wide_averages, aes(x=mean_ndsi, y=mean_ndvi))+ geom_point(alpha=0.25, color = &quot;#22AA99&quot;)+ geom_smooth(method=lm, color=&quot;#22AA99&quot;, size=0.1, se=FALSE)+ theme_few()+ labs(x=&quot;Average Winter NDSI&quot;, y=&quot;Average Summer NDVI&quot;) #Test correlation between ndvi and ndsi overall cor.test(wide_averages$mean_ndsi, wide_averages$mean_ndvi) #Fit lm model for ndvi by ndsi overall LMFit2 &lt;- lm(mean_ndvi~mean_ndsi, data = wide_averages) summary(LMFit2) The p-value from a test of correlation for average summer NDVI and average winter NDSI is 0.0002124 and less than 0.05. We have evidence of a positive linear association between average summer NDVI and average winter NDSI. For every 1 unit increase in average winter NDSI, there is a 0.042658 increase in average summer NDVI. Question C: NDVI-NDSI correlations NDVI-NDSI: Pre- versus post-fire figure and analyses #Plot and compare ndvi-ndsi relationship between pre- and post-burn periods ggplot(wide_averages, aes(x=mean_ndsi, y=mean_ndvi, color=burnperiod))+ geom_point(alpha=0.25)+ theme_few()+ geom_smooth(method=lm, size=0.1, se=FALSE)+ labs(x=&quot;Average Winter NDSI&quot;, y=&quot;Average Summer NDVI&quot;)+ scale_color_manual(name=&quot;&quot;,labels=c(&quot;Pre-fire&quot;,&quot;Post-fire&quot;), values= c(&quot;#2f94b5&quot;,&quot;#b5982f&quot;)) #Fit lm model to evaluate ndvi-ndsi correlation pre- and post-fire LMFit3 &lt;- lm(mean_ndvi~mean_ndsi*burnperiod, data= wide_averages) summary(LMFit3) #Create separate data frames for prefire and postfire prefire &lt;- wide_averages %&gt;% filter(burnperiod %in% &#39;prefire&#39;) postfire &lt;- wide_averages %&gt;% filter(burnperiod %in% &#39;postfire&#39;) #Test correlation between ndvi and ndsi prefire and postfire cor.test(prefire$mean_ndsi,prefire$mean_ndvi) cor.test(postfire$mean_ndsi,postfire$mean_ndvi) In pre-fire years, we do not have evidence of an association between average summer NDVI and average winter NDSI (p-value=0.1721). However, in post-fire years, we have evidence of an association between average summer NDVI and average winter NDSI (p-value=0.01048). NDVI-NDSI: Burned versus unburned figure and analyses #Plot and compare ndvi-ndsi relationship across burned versus unburned sites ggplot(wide_averages, aes(x=mean_ndsi, y=mean_ndvi, color=site))+ geom_point(alpha=0.25)+ theme_few()+ geom_smooth(method=lm, size=0.1, se=FALSE)+ labs(x=&quot;Average Winter NDSI&quot;, y=&quot;Average Summer NDVI&quot;)+ scale_color_manual(name=&quot;Site&quot;,labels=c(&quot;Burned&quot;,&quot;Unburned&quot;), values= c(&quot;#292423&quot;,&quot;#a4a823&quot;)) #Fit lm model to evaluate ndvi-ndsi correlation between burned and unburned sites LMFit4 &lt;- lm(mean_ndvi~mean_ndsi*site, data=wide_averages) summary(LMFit4) #Create separate data frames for burned and unburned sites burned &lt;- wide_averages %&gt;% # filter(burnperiod %in% &#39;postfire&#39;) %&gt;% filter(site %in% &#39;burned&#39;) unburned &lt;- wide_averages %&gt;% # filter(burnperiod %in% &#39;postfire&#39;) %&gt;% filter(site %in% &#39;unburned&#39;) #Test correlation between ndvi and ndsi in burned and unburned sites separately cor.test(burned$mean_ndsi, burned$mean_ndvi) cor.test(unburned$mean_ndsi,unburned$mean_ndvi) When analyzing all years included in the dataset, we do not have evidence of an association between average summer NDVI and average winter NDSI within the unburned area (p-value= 0.6589) and burned area (p-value=0.1825). When analyzing only years postfire, we still do not have evidence of an association between average summer NDVI and average winter NDSI in the unburned (p-value=0.905) and burned areas (p-value=0.3226). Additional findings Lastly, when looking at overall trends in NDVI and NDSI, we found August is the greenest month on average while February is the snowiest month on average. "],["key-programming-concepts.html", "Chapter 3 Key programming concepts 3.1 Introduction 3.2 Data Acquisiton: Snowpack Depth 3.3 Results: Snowpack Depth 3.4 Data Acquisition: Meterological Data 3.5 Results: Meterological Data", " Chapter 3 Key programming concepts 3.1 Introduction This project served as an introduction to webscraping, iteration, and functions. We extracted data from the Center for Snow and Avalanche Studies (CSAS) website: home to incredibly rich snow, temperature, and precipitation data. Project objectives: Extract data URLS or CSV links from website Download data using a for loop or map function Write custom functions 3.2 Data Acquisiton: Snowpack Depth Webscraping: extract links from webpage #Save site URL site_url &lt;- &#39;https://snowstudies.org/archived-data/&#39; #Read the web URL webpage &lt;- read_html(site_url) #Extract only weblinks and then URLs links &lt;- webpage %&gt;% html_nodes(&#39;a&#39;) %&gt;% .[grepl(&#39;24hr&#39;,.)] %&gt;% html_attr(&#39;href&#39;) Download data using a for loop #Split by forward slashes to parse out name of file splits &lt;- str_split_fixed(links,&#39;/&#39;,8) #Select column containing file name dataset &lt;- splits[,8] #Generate a file list to hold the data file_names &lt;- paste0(&#39;dataFunctions/&#39;,dataset) #Download data in a for loop for(i in 1:3){ download.file(links[i],destfile=file_names[i]) } downloaded &lt;- file.exists(file_names) evaluate &lt;- !all(downloaded) Download data using map function(s) #Utilize map for same operation as above, download the same 3 files if(evaluate == T) { map2(links[1:3], file_names[1:3], download.file) } else{ print(&#39;data already downloaded&#39;) } Read in snow data with pattern matching #Read in only snow data as a loop #Use pattern matching to only keep certain files snow_files &lt;- file_names %&gt;% .[!grepl(&#39;SG_24&#39;,.)] %&gt;% .[!grepl(&#39;PTSP&#39;,.)] Read in snow data with map function #Create function to read in snow files our_snow_reader &lt;- function(file){ name = str_split_fixed(file,&#39;/&#39;,2)[,2] %&gt;% gsub(&#39;_24hr.csv&#39;,&#39;&#39;,.) df &lt;- read_csv(file) %&gt;% select(Year,DOY,Sno_Height_M) %&gt;% mutate(site = name) } snow_data_full &lt;- map_dfr(snow_files,our_snow_reader) 3.3 Results: Snowpack Depth #Create column for yearly mean snow height by site snow_yearly &lt;- snow_data_full %&gt;% group_by(Year,site) %&gt;% summarize(mean_height = mean(Sno_Height_M,na.rm=T)) #Plot yearly mean snow height by site ggplot(snow_yearly,aes(x=Year,y=mean_height,color=site)) + geom_point(alpha=0.75) + ggthemes::theme_few() + scale_color_manual(name=&quot;Study Plots&quot;, labels=c(&quot;Swamp Angel&quot;,&quot;Senator Beck&quot;), values= c(&quot;#58A3EB&quot;,&quot;#58E8EB&quot;))+ labs(y=&quot;Depth of Snowpack (m)&quot;,title=&quot;Average Snow Height over Time&quot;) Figure 1. Yearly snow pack depth for Swamp Angel and Senator Beck study plots, Center for Snow and Avalanche Studies. Height of snow was sampled once at the end of an array. 3.4 Data Acquisition: Meterological Data Webscraping: extract meterological data URLs #Extract data URLs for SASP forcing and SBSP forcing datasets site_url2 &lt;- &#39;https://snowstudies.org/archived-data/&#39; webpage2 &lt;- read_html(site_url2) links2 &lt;- webpage2 %&gt;% html_nodes(&#39;a&#39;) %&gt;% .[grepl(&#39;forcing&#39;,.)] %&gt;% html_attr(&#39;href&#39;) Download meteorological data #Download the meterological data and save within data folder splits2 &lt;- str_split_fixed(links2,&#39;/&#39;,8) dataset2 &lt;- splits2[,8] filenames2 &lt;- paste0(&#39;dataFunctions/&#39;,dataset2) #Utilize map2() to download data map2(links2,filenames2,download.file) Write a custom function to read in data #Retrieve variable names from the metadata pdf file headers &lt;- pdf_text(&#39;https://snowstudies.org/wp-content/uploads/2022/02/Serially-Complete-Metadata-text08.pdf&#39;) %&gt;% readr::read_lines(.) %&gt;% trimws(.) %&gt;% str_split_fixed(.,&#39;\\\\.&#39;,2) %&gt;% .[,2] %&gt;% .[1:26] %&gt;% str_trim(side = &quot;left&quot;) #Write a function to read in the data and append site column forcing_files &lt;- filenames2 file &lt;- forcing_files[1] forcefile_reader &lt;- function(file) { name2 = str_split_fixed(file, &#39;_&#39;, 3)[, 2] df &lt;- read.csv(file, header = FALSE, sep = &#39;&#39;) %&gt;% select(V1, V2, V3, V7, V10) %&gt;% rename( year = 1, month = 2, day = 3, precip = 4, airtemp = 5 ) %&gt;% mutate(site = name2) } Read in meterological data files with map function #Use map function to read in meteorological files forcing_data_full &lt;- map_dfr(forcing_files, forcefile_reader) #Display summary as tibble forcing_tibble &lt;-as_tibble(forcing_data_full) knitr::kable(head(forcing_tibble)) year month day precip airtemp site 2003 11 10 0.0000000 270.135 SASP 2003 11 10 0.0002778 269.923 SASP 2003 11 10 0.0002778 269.707 SASP 2003 11 10 0.0002778 269.552 SASP 2003 11 10 0.0008333 269.467 SASP 2003 11 10 0.0002778 269.392 SASP 3.5 Results: Meterological Data #Create data frame with mean air temperature by year by site temp_yearly &lt;- forcing_data_full %&gt;% filter(!year %in% 2003) %&gt;% group_by(year,site) %&gt;% summarize(mean_yrtemp = mean(airtemp, na.rm=T)) #Make line plot of mean temperature by year by site ggplot(temp_yearly, aes(x=year, y=mean_yrtemp, color=site))+ geom_line(size=.75)+ theme_few()+ scale_color_manual(name=&quot;Study Plots&quot;, labels=c(&quot;Swamp Angel&quot;,&quot;Senator Beck&quot;), values= c(&quot;#58A3EB&quot;,&quot;#58E8EB&quot;))+ labs(x=&#39;Year&#39;, y=&#39;Average Air Temperature (K)&#39;) Figure 2. Yearly mean air temperature for Swamp Angel and Senator Beck study plots, CSAS. Records from 2003 were excluded given data was only available for two months out of the year. #Write function to make line plots of monthly average temps per site per year line_plotter &lt;- function(df, year) { temp_monthly &lt;- df %&gt;% group_by(year, month, site) %&gt;% summarize(mean_motemp = mean(airtemp, na.rm = T)) %&gt;% filter(i == year) print( ggplot(temp_monthly, aes( x = month, y = mean_motemp, color = site )) + geom_line(size = .75) + theme_few() + scale_color_manual(name=&quot;Study Plots&quot;, labels=c(&quot;Swamp Angel&quot;,&quot;Senator Beck&quot;), values = c(&quot;#762448&quot;, &quot;#B1D374&quot;)) + labs(x=&quot;Month&quot;,y = &#39;Average Air Temperature (K)&#39;, title = i)+ scale_x_continuous( breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), labels = c(&#39;January&#39;,&#39;February&#39;,&#39;March&#39;,&#39;April&#39;,&#39;May&#39;,&#39;June&#39;,&#39;July&#39;,&#39;August&#39;,&#39;September&#39;,&#39;October&#39;,&#39;November&#39;,&#39;December&#39;)) + theme( axis.text.x = element_text( color = &quot;black&quot;, size = 8, angle = 30, vjust = .8, hjust = .8 ) )) } #Use for loop to plot years 2005 to 2010 yrs = c(2005:2010) for (i in yrs){ line_plotter(forcing_data_full,year) } Figures 3-9. Monthly average temperature at study plots: Swamp Angel and Senator Beck, years 2005-2010. #Add date column to data frame #Use lubridate:: yday for day of year precip_daily &lt;- forcing_data_full %&gt;% group_by(month, day, year, site) %&gt;% summarize(mean_precip = mean(precip, na.rm = T)) %&gt;% mutate(date = as.Date(paste(year, month, day, sep = &quot;/&quot;))) %&gt;% mutate(yday = yday(date)) %&gt;% pivot_wider(names_from = site, values_from = mean_precip) %&gt;% dplyr::select(-SBSP)%&gt;% group_by(yday)%&gt;% summarize(mean_dy_precip = mean(SASP)) #Create plot with mean daily precip by day of year using ggplot ggplot(precip_daily, aes(x = yday, y = mean_dy_precip)) + geom_point(alpha=0.5) + theme_few() + labs(x = &#39;Day of Year&#39;, y = expression(&#39;Average Precipitation&#39; ~ (&#39;kg&#39; * m ^ 2 * &#39; per day&#39;)))+ scale_x_continuous(breaks=c(1,90,180,270,360)) Figure 10. Average daily precipitation by day of year at the Swamp Angel study plot, averaged across available years. #Create plot with mean daily precip by day of year using dygraphs #This is not averaged across available years precip_daily2 &lt;- forcing_data_full %&gt;% group_by(month, day, year, site) %&gt;% summarize(mean_precip = mean(precip, na.rm = T)) %&gt;% mutate(date = as.Date(paste(year, month, day, sep = &quot;/&quot;))) %&gt;% pivot_wider(names_from = site, values_from = mean_precip) %&gt;% ungroup() %&gt;% select(-SBSP, -month, -day, -year) precip_xts2 &lt;- xts(precip_daily2 %&gt;% select(SASP), order.by = precip_daily2$date) dygraph(precip_xts2, ylab = &quot;&quot;) %&gt;% dyOptions(fillGraph = TRUE, axisLabelFontSize=12) %&gt;% dySeries(&quot;SASP&quot;, label = &quot;Average Daily Precipitation (kgm2 per day)&quot;)%&gt;% dyLegend(width=400,show=&quot;always&quot;) Figure 11. Interactive plot of average precipitation by day of year at Swamp Angel study plot. #Write a function to create yearly plots for precip by day of year with ggplot precip_plotter2 &lt;- function(df, year) { precip_daily4 &lt;- df %&gt;% group_by(month, day, year, site) %&gt;% summarize(mean_precip = mean(precip, na.rm = T)) %&gt;% mutate(date = as.Date(paste(year, month, day, sep = &quot;/&quot;))) %&gt;% mutate(yday = yday(date)) %&gt;% pivot_wider(names_from = site, values_from = mean_precip) %&gt;% select(-SBSP) %&gt;% filter(year == i) print( ggplot(precip_daily4, aes(x = yday, y = SASP)) + geom_point(alpha=0.5) + theme_few() + labs( title = i, x = &#39;Day of Year&#39;, y = expression(&#39;Average Precipitation&#39; ~ (&#39;kg&#39; * m ^ 2 * &#39; per day&#39;))) + scale_x_continuous(breaks = c(1, 90, 180, 270, 360)) ) } #Use for loop to plot years 2005 to 2010 yrs = c(2005:2010) for (i in yrs){ precip_plotter2(forcing_data_full,year) } Figures 12-17. Yearly plots (2005-2010) of precipitation by day of year at the Swamp Angel study plot. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
